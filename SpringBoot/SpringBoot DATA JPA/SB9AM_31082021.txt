				Date : 31-08-2021
				Spring Boot 9AM
				  Mr. RAGHU
	-------------------------------------------------------------
Java 8:-
https://www.youtube.com/c/NareshIT/search?query=java%208

Method Reference Doc:-
https://docs.oracle.com/javase/tutorial/java/javaOO/methodreferences.html

		    Spring Boot Data JPA -- CrudRepository

ORM : Object Relational Mapping
JPA : Java Persistency API (Specification)
Hibernate : Vendor/Implementation
Data JPA  : Code Generator for common operations

JPA Annotations:
@Entity, @Id, @Table, @Column...etc

==========================================================================
Optional<T> [JDK 1.8]
=> To check null data and avoid NullPointerException.

--Before JDK 1.8----------------
String ob=<runtime>...(UI/DB)
if(ob!=null)
   sysout(ob.length()); 
---After JDK 1.8----------------
Optional<String> opt = <runtime>...(UI/DB)
if(opt.isPresent()) {
   String s = opt.get(); //returns actual object
   sysout(s.length()); 
}   

*) it is a contract approch b/w API and Application.

==========================================================
C:\Users\user>sqlplus
Enter user-name: system
Enter password:

Connected to:
Oracle Database 10g Express Edition Release 10.2.0.1.0 - Production

SQL> create user boot9am identified by boot9am;
User created.

SQL> grant dba to boot9am;
Grant succeeded.

SQL> conn boot9am
Enter password: boot9am

SQL> select *from global_name;

GLOBAL_NAME
--------------------------------------------------------------------------------
XE
============================================================
*) findById(id):Optional<T>
 This method is used to fetch one row data based on PK given
 If exist returns actual row as Object, else null.

SQL:
 select * from emptab where eid=?


*) count():long
  This method is used to count no.of rows exist in Database table.

SQL:
select count(*) from emptab;

===Code====================================================
Name : SpringBoot2DataJpaOracleCrud
Dep  : Lombok, Data JPA, Oracle

a. application.properties
spring.datasource.driver-class-name=oracle.jdbc.OracleDriver
spring.datasource.url=jdbc:oracle:thin:@localhost:1521:XE
spring.datasource.username=boot9am
spring.datasource.password=boot9am

spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
spring.jpa.database-platform=org.hibernate.dialect.Oracle10gDialect


b. Entity class
package in.nareshit.raghu.entity;

import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="emptab")
public class Employee {
	@Id
	@Column(name="eid")
	private Integer empId;
	@Column(name="ename")
	private String empName;
	@Column(name="esal")
	private Double empSal;
}


c. Repository
package in.nareshit.raghu.repo;

import org.springframework.data.repository.CrudRepository;

import in.nareshit.raghu.entity.Employee;

public interface EmployeeRepository extends CrudRepository<Employee, Integer> {

}

d. Runner class
package in.nareshit.raghu.runner;

import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.entity.Employee;
import in.nareshit.raghu.repo.EmployeeRepository;

@Component
public class TestRunner implements CommandLineRunner {

	@Autowired
	private EmployeeRepository repo;
	
	public void run(String... args) throws Exception {
		/*repo.save(new Employee(101, "AA", 100.0));
		repo.save(new Employee(102, "BA", 200.0));
		repo.save(new Employee(103, "AC", 300.0));
		repo.save(new Employee(104, "DD", 400.0));
		
		repo.findAll().forEach(System.out::println);*/
		
		Optional<Employee> opt = repo.findById(103);
		if(opt.isPresent()) {
			Employee e = opt.get();
			System.out.println("Data is => " + e );
		} else {
			System.out.println("No Data Found");
		}

	
		System.out.println("COUNT =>" + repo.count());
		repo.deleteById(103);
		repo.deleteAllById(Arrays.asList(101,104));
		repo.deleteAll();
	}

}
===========================================================================
deleteById(id) : This methos is used to delete one row data
deleteAllById(List) : This methos is used to  delete multiple rows data
deleteAll(): This methos is used to delete all rows data

