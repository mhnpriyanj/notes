				Date : 15-09-2021
				Spring Boot 9AM
				  Mr. RAGHU
		-----------------------------------------------
			   Data JPA : Many-To-Many

=> If both side 1...* existed then we use many-to-many concept.
ex:
           *...*
    Student-----<>Course

=> 3rd table is created [join table].
=> 2 FK columns [joinColumn, inverseJoinColumn]

--steps--------------------------------
S#1 Define two classes and apply HAS-A Relation (create HAS-A Variable)

S#2 Check for Non-Collection  | Collection  Type.  
   If collection type then change HAS-A variable to collection type.

S#3 Apply Association Mapping annotation over HAS-A Variable.

1...1 | @ManyToOne (unique condition)
*...1 | @ManyToOne
1...* | @OneToMany
*...* | @ManyToMany

S#4 Provide Join Column (or) Join table at HAS-A Variable
S#5 Draw tables with column details..
----------------------------------------------

--code--------------------
Name : SpringBoot2DataJpaManyTomany
Dep  : Data JPA, Lombok, MySQL

a. application.yml
spring:
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: jdbc:mysql://localhost:3306/boot9am
    username: root
    password: root
    
  jpa:
    show-sql: true
    hibernate:
      ddl-auto: create
    database-platform: org.hibernate.dialect.MySQL8Dialect  
-----------
b. Entity classes
package in.nareshit.raghu.entity;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="coursetab")
public class Course {
	@Id
	private Integer cid;
	private String cname;
	private Double camount;
	
}

package in.nareshit.raghu.entity;

import java.util.List;

import javax.persistence.Entity;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.JoinTable;
import javax.persistence.ManyToMany;
import javax.persistence.Table;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

@Data
@NoArgsConstructor
@AllArgsConstructor
@Entity
@Table(name="stdtab")
public class Student {
	@Id
	private Integer sid;
	private String sname;
	private String addr;

	@ManyToMany
	@JoinTable(name="stdcrstab",
	 joinColumns = @JoinColumn(name="sidFk"),
	 inverseJoinColumns = @JoinColumn(name="cidFk")
	)
	private List<Course> cobs;//HAS-A


}

c. Repository interface
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.entity.Course;

public interface CourseRepository 
	extends JpaRepository<Course, Integer> {

}
---------
package in.nareshit.raghu.repo;

import org.springframework.data.jpa.repository.JpaRepository;

import in.nareshit.raghu.entity.Student;

public interface StudentRepository 
	extends JpaRepository<Student, Integer> {

}

d. Runner class
package in.nareshit.raghu.runner;

import java.util.Arrays;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.CommandLineRunner;
import org.springframework.stereotype.Component;

import in.nareshit.raghu.entity.Course;
import in.nareshit.raghu.entity.Student;
import in.nareshit.raghu.repo.CourseRepository;
import in.nareshit.raghu.repo.StudentRepository;

@Component
public class DataInsertRunner implements CommandLineRunner {

	@Autowired
	private StudentRepository srepo;
	@Autowired
	private CourseRepository crepo;
	
	@Override
	public void run(String... args) throws Exception {
		Course c1 = new Course(100, "Core Java", 1000.0);
		Course c2 = new Course(101, "Adv Java", 1500.0);
		Course c3 = new Course(102, "Hibernate", 2500.0);
		Course c4 = new Course(103, "Boot and MS", 3500.0);
		
		crepo.save(c1);
		crepo.save(c2);
		crepo.save(c3);
		crepo.save(c4);
		
		Student s1 = new Student(51, "SAM", "HYD", Arrays.asList(c2,c4));
		Student s2 = new Student(52, "SYED", "BAN", Arrays.asList(c1,c3));
		Student s3 = new Student(53, "RAM", "DHL", Arrays.asList(c1,c4));
		Student s4 = new Student(54, "AJAY", "MUM", Arrays.asList(c2,c3));
		
		srepo.save(s1);
		srepo.save(s2);
		srepo.save(s3);
		srepo.save(s4);
	}

}
